/**
 * donutty timer // Create beautiful countdown timers and clocks with Javascript
 * @author i1group <i@i1group.ru>
 * @version 1.2.0
 * @license MIT
 * @link https://i1group.ru
 * @preserve
 */
!function (o, i) {
    "use strict";
    var t;
    function e(t) {
        return void 0 !== t
    }
    function n(t) {
        var s = parseInt(t, 10);
        return s || 0
    }
    function p(t) {
        return e(t) && (!0 === t || "true" === t || 1 === t || "1" === t)
    }
    (t = i.DonuttyTimer = function (t, s) {
        return t && "string" == typeof t ? this.$wrapper = o.querySelector(t) : t instanceof window.HTMLElement ? this.$wrapper = t : (this.$wrapper = o.body, s = t),
        this.$wrapper && i.Donutty && (null === s && (s = this.getOptionsFromTag()), this.options = s || {}, this.options.autostart = e(s.autostart) ? n(s.autostart) : 0, this.options.valueonstop = e(s.valueonstop) ? s.valueonstop : "reset", this.options.speed = e(s.speed) ? n(s.speed) : 1e3, this.options.delta = e(s.delta) ? n(s.delta) : -1, this.options.min = e(s.min) ? n(s.min) : 0, this.options.max = e(s.max) ? n(s.max) : 60, this.options.runout = e(s.runout) ? n(s.runout) : 0, this.options.value = e(s.value) ? n(s.value) : 0 < this.options.delta ? this.options.min : this.options.max, this.options.valuedisplay = this.options.value, this.options.valueinitial = this.options.value, this.options.transition = e(s.transition) ? s.transition : "all 200ms linear", this.options.transitionsync = !e(s.transitionsync) || p(s.transitionsync), this.options.callbacksafterstop = !!e(s.callbacksafterstop) && p(s.callbacksafterstop), this.options.format = e(s.format) ? s.format : {
                min: !0,
                sec: !0
            }, this.options.separator = e(s.separator) ? s.separator : ":", this.options.tag = e(s.tag) ? s.tag : "span", this.options.labels = e(s.labels) ? s.labels : {}, this.options.buttons = e(s.buttons) ? s.buttons : {}, this.options.callbacks = e(s.callbacks) ? s.callbacks : {}, this.options.stoponend = !e(s.stoponend) || p(s.stoponend), this.options.resetvalueonstart = !e(s.resetvalueonstart) || p(s.resetvalueonstart), this.options.responsive = !e(s.responsive) || p(s.responsive), this.init()),
        this
    }).prototype.getOptionsFromTag = function () {
        var t = JSON.parse(JSON.stringify(this.$wrapper.dataset)),
        s = ["format", "labels", "buttons"];
        for (var i in s)
            t[s[i]] && (t[s[i]] = JSON.parse(t[s[i]].replace(/\'/g, '"')));
        return t
    },
    t.prototype.getTransitionDuration = function () {
        var t = 0,
        s = 0,
        i = this.options.transition.split(" ");
        if (!this.options.transitionsync || !i[0] || "none" == i[0])
            return 0;
        for (var o = 0; !t && o < i.length; o++) {
            var e = parseFloat(i[o]);
            0 < e ? s = (t = 0 < i[o].indexOf("ms") ? 1 : 1e3) * e : (i[o] = i[o].trim(), "0s" != i[o] && "0ms" != i[o] || (t = 1))
        }
        return s
    },
    t.prototype.init = function () {
        var t;
        return this.$wrapper.innerHTML = "",
        this.$wrapper.donutty = new Donutty(this.$wrapper, this.options),
        (this.$wrapper.donuttyTimer = this).was = {},
        this.createText(),
        this.assignButtons(),
        this.reset(""),
        this.initStyles(),
        this.options.responsive || this.updateSize(),
        this.setStatus("init"),
        this.callback("init"),
        0 <= this.options.autostart && ((t = this).interval = setTimeout(function () {
                t.start()
            }, this.options.autostart)),
        this
    },
    t.prototype.createText = function () {
        var t = this.$wrapper.donutty;
        return t && !t.$text && (t.$text = o.createElement("span"), t.$text.classList.add("donut-text"), t.$text.style.opacity = 0, t.$wrapper.appendChild(t.$text), this.updateText(), setTimeout(function () {
                t.$text.style.opacity = 1
            }, this.getTransitionDuration())),
        this
    },
    t.prototype.assignButtons = function () {
        var t = this.options.buttons,
        s = ["play", "pause", "stop", "playpause"];
        for (var i in this.options.domButtons = {}, s)
            this.options.domButtons[s[i]] = "string" == typeof t[s[i]] ? o.querySelector(t[s[i]]) : t[s[i]], function (t) {
                var s;
                t && this.options.domButtons[t] && (s = this, "playpause" === t ? this.options.domButtons[t].addEventListener("click", function () {
                        s.is("playing") ? s.pause() : s.play()
                    }) : this.options.domButtons[t].addEventListener("click", function () {
                        s[t]()
                    }))
            }
        .call(this, s[i]);
        return this
    },
    t.prototype.reset = function (t) {
        var s = 0 < this.options.delta ? this.options.max : this.options.min;
        return clearTimeout(this.interval),
        this.options.callbacksafterstop || clearTimeout(this.intervaldo),
        "reset" === t && this.setState({
            value: s,
            valuedisplay: s
        }),
        "initial" === t && this.setState({
            value: this.options.valueinitial,
            valuedisplay: this.options.valueinitial
        }),
        this.$wrapper.classList.remove("dt-runout"),
        this.$wrapper.classList.remove("dt-end"),
        this.options.resetvalueonstart = !0,
        this.was = {},
        this.updateText(),
        this
    },
    t.prototype.callback = function (t) {
        return "function" == typeof this.options.callbacks[t] && this.options.callbacks[t].call(this),
        this
    },
    t.prototype.initStyles = function () {
        return this.$wrapper.style.position = "relative",
        this.$wrapper.donutty && this.$wrapper.donutty.$text && Object.assign(this.$wrapper.donutty.$text.style, {
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)"
        }),
        this
    },
    t.prototype.updateSize = function () {
        var t,
        s,
        i = this.$wrapper.donutty ? this.$wrapper.donutty.$svg : null;
        return i && (t = i.clientWidth, s = i.ClientHeight, t && s || !this.options.radius || (s = t = 2 * this.options.radius), Object.assign(this.$wrapper.style, {
                width: t + "px",
                height: s + "px"
            })),
        this.callback("updatesize"),
        this
    },
    t.prototype.updateText = function () {
        var t = this.getState(),
        s = "function" == typeof this.options.gettext ? this.options.gettext(t) : this.getText(t);
        return this.$wrapper.donutty && this.$wrapper.donutty.$text && (this.$wrapper.donutty.$text.innerHTML = s),
        this
    },
    t.prototype.getText = function (t) {
        var s,
        i = this.getStatus(),
        o = this.options.labels;
        if (o.stop && "stop" === i)
            s = o.stop;
        else if (o.pause && "pause" === i)
            s = o.pause;
        else if (o.init && "init" === i)
            s = o.init;
        else {
            var e = this.getTime(t.valuedisplay),
            n = t.valuedisplay < 0 ? "-" : "",
            a = [];
            for (var r in e)
                e[r] && a.push("<" + this.options.tag + ' class="' + r + '">' + e[r] + "</" + this.options.tag + ">");
            s = a.join("<" + this.options.tag + ' class="separator">' + this.options.separator + "</" + this.options.tag + ">"),
            n && (s = "<" + this.options.tag + ' class="sign">' + n + "</" + this.options.tag + ">" + s)
        }
        return s
    },
    t.prototype.getTime = function (t) {
        var s = {},
        i = {},
        o = {
            day: 86400,
            hour: 3600,
            min: 60,
            sec: 1
        },
        e = 0,
        n = 0,
        a = this.options.format;
        for (var r in t = Math.abs(t), o)
            s[r] = Math.floor((t - e) / o[r]), e += s[r] * o[r], p(a[r]) ? (i[r] = s[r] + (n ? Math.floor(n / o[r]) : 0), n = 0) : (i[r] = "", n += s[r] * o[r]), i[r] = i[r].toString(), "day" !== r && "" !== i[r] && (i[r] = i[r].padStart(2, "0"));
        return i
    },
    t.prototype.getState = function () {
        var t = this.$wrapper.donutty ? this.$wrapper.donutty.state : {};
        return t.valuedisplay = this.get("valuedisplay"),
        t
    },
    t.prototype.setState = function (t) {
        for (var s in t)
            this.set(s, t[s]);
        return this
    },
    t.prototype.get = function (t) {
        return this.options[t]
    },
    t.prototype.set = function (t, s) {
        return e(t) && e(s) && (this.options[t] = s, this.$wrapper.donutty && this.$wrapper.donutty.set(t, s), "value" === t && (this.is("started") || (this.options.resetvalueonstart = !1), this.options.transitionsync || (this.options.valuedisplay = s))),
        this
    },
    t.prototype.adjustValue = function (t) {
        var s = this.getState(),
        i = s.value + t,
        o = s.valuedisplay + t;
        return 0 <= this.options.delta ? (this.options.stoponend && i > s.max && (i = s.max), i < s.min && (i = s.min), this.options.stoponend && o > s.max && (o = s.max), o < s.min && (o = s.min), o < s.max && (this.was.end = !1), o < this.options.runout && (this.was.runout = !1)) : (this.options.stoponend && i < s.min && (i = s.min), i > s.max && (i = s.max), this.options.stoponend && o < s.min && (o = s.min), o > s.max && (o = s.max), o > s.min && (this.was.end = !1), o > this.options.runout && (this.was.runout = !1)),
        this.setState({
            value: i,
            valuedisplay: o
        }),
        this.is("started") || (this.options.resetvalueonstart = !1),
        this.updateText(),
        this
    },
    t.prototype.is = function (t) {
        var s = this.getStatus();
        switch (t) {
        case "started":
            return 0 <= ["play", "pause"].indexOf(s);
        case "playing":
            t = "play";
            break;
        case "paused":
            t = "pause";
            break;
        case "stopped":
            t = "stop"
        }
        return s === t
    },
    t.prototype.getStatus = function () {
        return this.get("status")
    },
    t.prototype.setStatus = function (t) {
        return this.setState({
            status: t
        }),
        this.setStatusClass(t),
        this.updateText(),
        this
    },
    t.prototype.setStatusClass = function (t) {
        var o = "",
        s = "dt-status-" + t;
        for (var i in this.$wrapper.classList.forEach(function (t, s, i) {
                0 === t.indexOf("dt-status-") && (o = t)
            }, this.$wrapper), o && this.$wrapper.classList.remove(o), this.$wrapper.classList.add(s), this.options.domButtons)
            this.options.domButtons[i] && (o && this.options.domButtons[i].classList.remove(o), this.options.domButtons[i].classList.add(s));
        return this
    },
    t.prototype.start = function () {
        if (this.is("started"))
            return this;
        var t = this;
        return this.options.resetvalueonstart && this.setState({
            value: this.options.valueinitial,
            valuedisplay: this.options.valueinitial
        }),
        this.options.resetvalueonstart = !0,
        this.setStatus("play"),
        this.interval = setTimeout(function () {
            t.tick()
        }, this.options.speed - this.getTransitionDuration()),
        this.callback("start"),
        this
    },
    t.prototype.tick = function () {
        if (this.is("stopped"))
            return this;
        var t = this,
        s = this.getState(),
        i = s.value + this.options.delta,
        o = !1,
        e = !1,
        n = this.getTransitionDuration();
        return this.is("playing") && (0 <= this.options.delta && i >= s.max ? (e = !0, this.options.stoponend && (i = s.max, o = !0)) : this.options.delta < 0 && i <= s.min && (e = !0, this.options.stoponend && (i = s.min, o = !0)), this.set("value", i), e && (this.was.end ? e = !1 : this.was.end = !0), 0 < n ? this.intervaldo = setTimeout(function () {
                t.doTick(e, o)
            }, n) : this.doTick(e, o)),
        this.interval = setTimeout(function () {
            t.tick()
        }, this.options.speed),
        this
    },
    t.prototype.doTick = function (t, s) {
        var i = this.get("value");
        return this.set("valuedisplay", i),
        this.updateText(),
        this.callback("tick"),
        this.options.runout && (0 <= this.options.delta && i >= this.options.runout || this.options.delta < 0 && i <= this.options.runout ? (this.$wrapper.classList.add("dt-runout"), this.was.runout || this.callback("runout"), this.was.runout = !0) : (this.$wrapper.classList.remove("dt-runout"), this.was.runout = !1)),
        t && (this.callback("end"), this.$wrapper.classList.add("dt-end")),
        s && this.stop(),
        this
    },
    t.prototype.pause = function () {
        return this.is("playing") && (this.setStatus("pause"), this.callback("pause")),
        this
    },
    t.prototype.play = function () {
        return this.is("started") ? (this.setStatus("play"), this.callback("play")) : this.start(),
        this
    },
    t.prototype.stop = function () {
        if (!this.is("stopped"))
            return this.reset(this.options.valueonstop), this.setStatus("stop"), this.callback("stop"), this
    }
}
(document, window), function (s, i) {
    function t() {
        var t = i.querySelectorAll("[data-donutty-timer]");
        Array.prototype.forEach.call(t, function (t) {
            new s(t, null)
        })
    }
    "complete" === i.readyState || "loading" !== i.readyState && !i.documentElement.doScroll ? t() : i.addEventListener("DOMContentLoaded", t)
}
(DonuttyTimer, document);
